{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/withSelfEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/Marker.vue?8daa","webpack:///node_modules/@phila/vue-mapping/src/mapbox/UI/Marker.vue","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/Marker.vue?7ccf","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/UI/Marker.vue"],"names":["methods","event","data","this","$_emitMapEvent","control","events","emitter","Object","keys","$listeners","forEach","eventName","includes","on","$_emitSelfEvent","length","off","name","$emit","map","component","$_emitEvent","type","mapboxEvent","render","_vm","_h","$createElement","_c","_self","staticStyle","_t","_e","staticRenderFns","drag","dragstart","dragend","click","mouseenter","mouseleave","mixins","inject","provide","self","marker","props","offset","default","coordinates","Array","required","color","String","anchor","draggable","Boolean","initial","undefined","watch","setLngLat","lngLat","setDraggable","next","mounted","$slots","markerOptions","element","elm","mapbox","Marker","newCoordinates","target","_lngLat","$_bindSelfEvents","eventNames","$_addMarker","beforeDestroy","remove","addTo","$_bindMarkerDOMEvents","values","markerDOMEvents","key","togglePopup"],"mappings":"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","file":"static/js/pvm_MglMarker.js","sourcesContent":["export default {\n  methods: {\n    $_emitSelfEvent(event, data = {}) {\n      // console.log('withSelfEvents.js, $emitSelfEvent is running');\n      this.$_emitMapEvent(event, { control: this.control, ...data });\n    },\n    /** Bind events for markers, popups and controls.\n     * MapboxGL JS emits this events on popup or marker object,\n     * so we treat them as 'self' events of these objects\n     */\n    $_bindSelfEvents(events, emitter) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          emitter.on(eventName, this.$_emitSelfEvent);\n        }\n      });\n    },\n\n    $_unbindSelfEvents(events, emitter) {\n      if (events.length === 0) {\n        return;\n      }\n      if (!emitter) {\n        return;\n      }\n      events.forEach(eventName => {\n        emitter.off(eventName, this.$_emitSelfEvent);\n      });\n    },\n  },\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"display\":\"none\"}},[_vm._t(\"marker\"),(_vm.marker)?_vm._t(\"default\"):_vm._e()],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n  <div style=\"display: none\">\n    <!-- slot for custom marker -->\n    <slot name=\"marker\" />\n    <!-- slot for popup -->\n    <slot v-if=\"marker\" />\n  </div>\n</template>\n\n<script>\nimport withEvents from \"../lib/withEvents\";\nimport withSelfEvents from \"./withSelfEvents\";\n\nconst markerEvents = {\n  drag: \"drag\",\n  dragstart: \"dragstart\",\n  dragend: \"dragend\",\n};\n\nconst markerDOMEvents = {\n  click: \"click\",\n  mouseenter: \"mouseenter\",\n  mouseleave: \"mouseleave\",\n};\n\nexport default {\n  name: \"MapMarker\",\n  mixins: [ withEvents, withSelfEvents ],\n\n  inject: [ \"mapbox\", \"map\" ],\n\n  provide() {\n    const self = this;\n    return {\n      get marker() {\n        return self.marker;\n      },\n    };\n  },\n\n  props: {\n    // mapbox marker options\n    offset: {\n      type: [ Object, Array ],\n      default: () => [ 0, 0 ],\n    },\n    coordinates: {\n      type: Array,\n      required: true,\n    },\n    color: {\n      type: String,\n    },\n    anchor: {\n      type: String,\n      default: \"center\",\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n  },\n\n  data() {\n    return {\n      initial: true,\n      marker: undefined,\n    };\n  },\n\n  watch: {\n    coordinates(lngLat) {\n      if (this.initial) {\n        return;\n      }\n      this.marker.setLngLat(lngLat);\n    },\n    draggable(next) {\n      if (this.initial) {\n        return;\n      }\n      this.marker.setDraggable(next);\n    },\n  },\n\n  mounted() {\n    const markerOptions = {\n      ...this.$props,\n    };\n    if (this.$slots.marker) {\n      markerOptions.element = this.$slots.marker[0].elm;\n    }\n    this.marker = new this.mapbox.Marker(markerOptions);\n\n    if (this.$listeners[\"update:coordinates\"]) {\n      this.marker.on(\"dragend\", event => {\n        let newCoordinates;\n        if (this.coordinates instanceof Array) {\n          newCoordinates = [ event.target._lngLat.lng, event.target._lngLat.lat ];\n        } else {\n          newCoordinates = event.target._lngLat;\n        }\n        this.$emit(\"update:coordinates\", newCoordinates);\n      });\n    }\n\n    const eventNames = Object.keys(markerEvents);\n    this.$_bindSelfEvents(eventNames, this.marker);\n\n    this.initial = false;\n    this.$_addMarker();\n  },\n\n  beforeDestroy() {\n    if (this.map !== undefined && this.marker !== undefined) {\n      this.marker.remove();\n    }\n  },\n\n  methods: {\n    $_addMarker() {\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\n      this.$_bindMarkerDOMEvents();\n      this.$_emitEvent(\"added\", { marker: this.marker });\n    },\n\n    $_emitSelfEvent(event) {\n      this.$_emitMapEvent(event, { marker: this.marker });\n    },\n\n    $_bindMarkerDOMEvents() {\n      Object.keys(this.$listeners).forEach(key => {\n        if (Object.values(markerDOMEvents).includes(key)) {\n          this.marker._element.addEventListener(key, event => {\n            this.$_emitSelfEvent(event);\n          });\n        }\n      });\n    },\n\n    remove() {\n      this.marker.remove();\n      this.$_emitEvent(\"removed\");\n    },\n\n    togglePopup() {\n      return this.marker.togglePopup();\n    },\n  },\n};\n</script>\n","import mod from \"-!../../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../../thread-loader/dist/cjs.js!../../../../../babel-loader/lib/index.js!../../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../../vue-loader/lib/index.js??vue-loader-options!./Marker.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../cache-loader/dist/cjs.js??ref--12-0!../../../../../thread-loader/dist/cjs.js!../../../../../babel-loader/lib/index.js!../../../../../cache-loader/dist/cjs.js??ref--0-0!../../../../../vue-loader/lib/index.js??vue-loader-options!./Marker.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Marker.vue?vue&type=template&id=2d111d29&\"\nimport script from \"./Marker.vue?vue&type=script&lang=js&\"\nexport * from \"./Marker.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}