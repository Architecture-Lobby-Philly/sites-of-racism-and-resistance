(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["pvm_MglGeojsonLayer"],{"521f":function(e,t,r){"use strict";var i=r("9f0b");const s={sourceId:{type:String,required:!0},source:{type:[Object,String],default:void 0}},a={layerId:{type:String,required:!0},layer:{type:Object,required:!0},before:{type:String,default:void 0}},o={clearSource:{type:Boolean,default:!0},replaceSource:{type:Boolean,default:!1},replace:{type:Boolean,default:!1}};t["a"]={mixins:[i["a"]],props:{...s,...a,...o},inject:["mapbox","map"],data(){return{initial:!0}},computed:{sourceLoaded(){return!!this.map&&this.map.isSourceLoaded(this.sourceId)},mapLayer(){return this.map?this.map.getLayer(this.layerId):null},mapSource(){return this.map?this.map.getSource(this.sourceId):null}},created(){this.layer.minzoom&&this.$watch("layer.minzoom",(function(e){this.initial||this.map.setLayerZoomRange(this.layerId,e,this.layer.maxzoom)})),this.layer.maxzoom&&this.$watch("layer.maxzoom",(function(e){this.initial||this.map.setLayerZoomRange(this.layerId,this.layer.minzoom,e)})),this.layer.paint&&this.$watch("layer.paint",(function(e){if(!this.initial&&e)for(let t of Object.keys(e))this.map.setPaintProperty(this.layerId,t,e[t])}),{deep:!0}),this.layer.layout&&this.$watch("layer.layout",(function(e){if(!this.initial&&e)for(let t of Object.keys(e))this.map.setLayoutProperty(this.layerId,t,e[t])}),{deep:!0}),this.layer.filter&&this.$watch("layer.filter",(function(e){this.initial||this.map.setFilter(this.layerId,e)}),{deep:!0})},beforeDestroy(){try{this.map.removeLayer(this.layerId)}catch(e){this.$_emitEvent("layer-does-not-exist",{layerId:this.sourceId,error:e})}if(this.clearSource)try{this.map.removeSource(this.sourceId)}catch(e){this.$_emitEvent("source-does-not-exist",{sourceId:this.sourceId,error:e})}},methods:{$_emitLayerMapEvent(e){return this.$_emitMapEvent(e,{layerId:this.layerId})},$_bindLayerEvents(e){Object.keys(this.$listeners).forEach(t=>{e.includes(t)&&this.map.on(t,this.layerId,this.$_emitLayerMapEvent)})},$_unbindEvents(e){this.map&&e.forEach(e=>{this.map.off(e,this.layerId,this.$_emitLayerMapEvent)})},$_watchSourceLoading(e){"source"===e.dataType&&e.sourceId===this.sourceId&&(this.$_emitEvent("layer-source-loading",{sourceId:this.sourceId}),this.map.off("dataloading",this.$_watchSourceLoading))},move(e){this.map.moveLayer(this.layerId,e),this.$_emitEvent("layer-moved",{layerId:this.layerId,beforeId:e})},remove(){this.map.removeLayer(this.layerId),this.map.removeSource(this.sourceId),this.$_emitEvent("layer-removed",{layerId:this.layerId}),this.$destroy()}},render(){}}},"760f":function(e,t,r){"use strict";r.r(t);var i=r("a2c7"),s=r("521f");t["default"]={name:"GeojsonLayer",mixins:[s["a"]],computed:{getSourceFeatures(){return e=>this.map?this.map.querySourceFeatures(this.sourceId,{filter:e}):null},getRenderedFeatures(){return(e,t)=>this.map?this.map.queryRenderedFeatures(e,{layers:[this.layerId],filter:t}):null},getClusterExpansionZoom(){return e=>new Promise((t,r)=>{if(!this.mapSource)return r(new Error(`Map source with id ${this.sourceId} not found.`));this.mapSource.getClusterExpansionZoom(e,(e,i)=>e?r(e):t(i))})},getClusterChildren(){return e=>new Promise((t,r)=>{const i=this.mapSource;if(!i)return r(new Error(`Map source with id ${this.sourceId} not found.`));i.getClusterChildren(e,(e,i)=>e?r(e):t(i))})},getClusterLeaves(){return(...e)=>new Promise((t,r)=>{if(!this.mapSource)return r(new Error(`Map source with id ${this.sourceId} not found.`));this.mapSource.getClusterLeaves(...e,(e,i)=>e?r(e):t(i))})}},created(){console.log("GeojsonLayer.js created is running, this.sourceId:",this.sourceId,"this.source:",this.source),this.source&&this.$watch("source.data",(function(e){this.initial||this.mapSource.setData(e)}),{deep:!0}),this.$_deferredMount()},methods:{$_deferredMount(){if(this.map.on("dataloading",this.$_watchSourceLoading),this.source){const t={type:"geojson",...this.source};try{console.log("try map.addSource is starting"),this.$props.layer.layout["icon-image"]&&this.map.loadImage(this.$attrs.icon,function(e,t){this.map.addImage(this.$props.layer.layout["icon-image"],t)}.bind(this)),this.map.addSource(this.sourceId,t)}catch(e){console.log("catch err is running, err:",e),this.replaceSource&&(this.map.removeSource(this.sourceId),this.map.addSource(this.sourceId,t))}}this.$_addLayer(),this.$_bindLayerEvents(i["a"]),this.map.off("dataloading",this.$_watchSourceLoading),this.initial=!1},$_addLayer(){let e=this.map.getLayer(this.layerId);if(e){if(!this.replace)return this.$_emitEvent("layer-exists",{layerId:this.layerId}),e;this.map.removeLayer(this.layerId)}const t={id:this.layerId,source:this.sourceId,...this.layer};console.log("$_addLayer is still running, layer:",t),this.map.addLayer(t,this.before),this.$_emitEvent("added",{layerId:this.layerId})},setFeatureState(e,t){if(this.map){const r={id:e,source:this.source};return this.map.setFeatureState(r,t)}},getFeatureState(e){if(this.map){const t={id:e,source:this.source};return this.map.getFeatureState(t)}},removeFeatureState(e,t,r){if(this.map){const i={id:e,source:this.source,sourceLayer:t};return this.map.removeFeatureState(i,r)}}}}},"9f0b":function(e,t,r){"use strict";t["a"]={methods:{$_emitEvent(e,t={}){this.$emit(e,{map:this.map,component:this,...t})},$_emitMapEvent(e,t={}){this.$_emitEvent(e.type,{mapboxEvent:e,...t})}}}},a2c7:function(e,t,r){"use strict";t["a"]=["mousedown","mouseup","click","dblclick","mousemove","mouseenter","mouseleave","mouseover","mouseout","contextmenu","touchstart","touchend","touchcancel"]}}]);
//# sourceMappingURL=pvm_MglGeojsonLayer.js.map