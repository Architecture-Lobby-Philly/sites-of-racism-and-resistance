{"version":3,"sources":["webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/VectorLayer.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/layer/layerMixin.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/withEvents.js","webpack:///./node_modules/@phila/vue-mapping/src/mapbox/lib/layerEvents.js"],"names":["name","mixins","computed","filter","this","map","querySourceFeatures","sourceId","sourceLayer","layer","geometry","queryRenderedFeatures","layers","layerId","watch","initial","setFilter","$_deferredMount","methods","source","type","on","$_watchSourceLoading","addSource","err","replaceSource","removeSource","$_addLayer","$_bindLayerEvents","off","existed","getLayer","replace","$_emitEvent","removeLayer","id","addLayer","before","featureId","state","params","setFeatureState","getFeatureState","mapboxSourceProps","String","required","Object","default","undefined","mapboxLayerStyleProps","componentProps","clearSource","Boolean","props","inject","isSourceLoaded","getSource","minzoom","$watch","next","setLayerZoomRange","maxzoom","paint","prop","keys","setPaintProperty","deep","layout","setLayoutProperty","error","event","$_emitMapEvent","events","$listeners","forEach","eventName","includes","$_emitLayerMapEvent","data","dataType","beforeId","moveLayer","$destroy","$emit","component","mapboxEvent"],"mappings":"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","file":"static/js/pvm_MglVectorLayer.js","sourcesContent":["import layerEvents from \"../lib/layerEvents\";\nimport mixin from \"./layerMixin\";\n\nexport default {\n  name: \"VectorLayer\",\n  mixins: [ mixin ],\n\n  computed: {\n    getSourceFeatures() {\n      return filter => {\n        if (this.map) {\n          return this.map.querySourceFeatures(this.sourceId, {\n            sourceLayer: this.layer[\"source-layer\"],\n            filter,\n          });\n        }\n        return null;\n      };\n    },\n\n    getRenderedFeatures() {\n      return (geometry, filter) => {\n        if (this.map) {\n          return this.map.queryRenderedFeatures(geometry, {\n            layers: [ this.layerId ],\n            filter,\n          });\n        }\n        return null;\n      };\n    },\n  },\n\n  watch: {\n    filter(filter) {\n      if (this.initial) {\n        return;\n      }\n      this.map.setFilter(this.layerId, filter);\n    },\n  },\n\n  created() {\n    this.$_deferredMount();\n  },\n\n  methods: {\n    $_deferredMount() {\n      let source = {\n        type: \"vector\",\n        ...this.source,\n      };\n\n      this.map.on(\"dataloading\", this.$_watchSourceLoading);\n      try {\n        this.map.addSource(this.sourceId, source);\n      } catch (err) {\n        if (this.replaceSource) {\n          this.map.removeSource(this.sourceId);\n          this.map.addSource(this.sourceId, source);\n        }\n      }\n      this.$_addLayer();\n      this.$_bindLayerEvents(layerEvents);\n      this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      this.initial = false;\n    },\n\n    $_addLayer() {\n      let existed = this.map.getLayer(this.layerId);\n      if (existed) {\n        if (this.replace) {\n          this.map.removeLayer(this.layerId);\n        } else {\n          this.$_emitEvent(\"layer-exists\", { layerId: this.layerId });\n          return existed;\n        }\n      }\n      let layer = {\n        id: this.layerId,\n        source: this.sourceId,\n        ...this.layer,\n      };\n\n      this.map.addLayer(layer, this.before);\n      this.$_emitEvent(\"added\", { layerId: this.layerId });\n    },\n\n    setFeatureState(featureId, state) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.sourceId,\n          \"source-layer\": this.layer[\"source-layer\"],\n        };\n        return this.map.setFeatureState(params, state);\n      }\n    },\n\n    getFeatureState(featureId) {\n      if (this.map) {\n        const params = {\n          id: featureId,\n          source: this.source,\n          \"source-layer\": this.layer[\"source-layer\"],\n        };\n        return this.map.getFeatureState(params);\n      }\n    },\n  },\n};\n","// import withRegistration from \"../../lib/withRegistration\";\nimport withEvents from \"../lib/withEvents\";\n\nconst mapboxSourceProps = {\n  sourceId: {\n    type: String,\n    required: true,\n  },\n  source: {\n    type: [ Object, String ],\n    default: undefined,\n  },\n};\n\nconst mapboxLayerStyleProps = {\n  layerId: {\n    type: String,\n    required: true,\n  },\n  layer: {\n    type: Object,\n    required: true,\n  },\n  before: {\n    type: String,\n    default: undefined,\n  },\n};\n\nconst componentProps = {\n  clearSource: {\n    type: Boolean,\n    default: true,\n  },\n  replaceSource: {\n    type: Boolean,\n    default: false,\n  },\n  replace: {\n    type: Boolean,\n    default: false,\n  },\n};\n\nexport default {\n  mixins: [ withEvents ],\n  props: {\n    ...mapboxSourceProps,\n    ...mapboxLayerStyleProps,\n    ...componentProps,\n  },\n\n  inject: [ \"mapbox\", \"map\" ],\n\n  data() {\n    return {\n      initial: true,\n    };\n  },\n\n  computed: {\n    sourceLoaded() {\n      return this.map ? this.map.isSourceLoaded(this.sourceId) : false;\n    },\n    mapLayer() {\n      return this.map ? this.map.getLayer(this.layerId) : null;\n    },\n    mapSource() {\n      return this.map ? this.map.getSource(this.sourceId) : null;\n    },\n  },\n\n  created() {\n    if (this.layer.minzoom) {\n      this.$watch(\"layer.minzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, next, this.layer.maxzoom);\n      });\n    }\n\n    if (this.layer.maxzoom) {\n      this.$watch(\"layer.maxzoom\", function(next) {\n        if (this.initial) {\n          return;\n        }\n        this.map.setLayerZoomRange(this.layerId, this.layer.minzoom, next);\n      });\n    }\n\n    if (this.layer.paint) {\n      this.$watch(\n        \"layer.paint\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setPaintProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.layout) {\n      this.$watch(\n        \"layer.layout\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          if (next) {\n            for (let prop of Object.keys(next)) {\n              this.map.setLayoutProperty(this.layerId, prop, next[prop]);\n            }\n          }\n        },\n        { deep: true },\n      );\n    }\n\n    if (this.layer.filter) {\n      this.$watch(\n        \"layer.filter\",\n        function(next) {\n          if (this.initial) {\n            return;\n          }\n          this.map.setFilter(this.layerId, next);\n        },\n        { deep: true },\n      );\n    }\n\n    // if (this.layer.tiles) {\n    //   this.$watch(\n    //     \"layer\",\n    //     function(next) {\n    //       console.log('watch layer tiles is firing, next:', next);\n    //       if (this.initial) return;\n    //       // this.map.removeLayer(this.layerId);\n    //       this.map.addLayer(next);\n    //       // this.map.setFilter(this.layerId, next);\n    //     },\n    //     { deep: true }\n    //   );\n    // }\n  },\n\n  beforeDestroy() {\n    // console.log('layerMixin beforeDestroy is running, this.layerId:', this.layerId, 'this.clearSource:', this.clearSource, 'this.map:', this.map, 'this.map.loaded():', this.map.loaded());\n    // if (this.map && this.map.loaded()) {\n    try {\n      // console.log('layerMixin beforeDestroy if map and maploaded try is running')\n      this.map.removeLayer(this.layerId);\n    } catch (err) {\n      // console.log('layerMixin beforeDestroy error 1 is running')\n      this.$_emitEvent(\"layer-does-not-exist\", {\n        layerId: this.sourceId,\n        error: err,\n      });\n    }\n    if (this.clearSource) {\n      // console.log('layerMixin beforeDestroy if clearSource is running')\n      try {\n        // console.log('layerMixin beforeDestroy if clearSource try is running');\n        this.map.removeSource(this.sourceId);\n      } catch (err) {\n        this.$_emitEvent(\"source-does-not-exist\", {\n          sourceId: this.sourceId,\n          error: err,\n        });\n      }\n    }\n    // }\n  },\n\n  methods: {\n    $_emitLayerMapEvent(event) {\n      return this.$_emitMapEvent(event, { layerId: this.layerId });\n    },\n\n    $_bindLayerEvents(events) {\n      Object.keys(this.$listeners).forEach(eventName => {\n        if (events.includes(eventName)) {\n          this.map.on(eventName, this.layerId, this.$_emitLayerMapEvent);\n        }\n      });\n    },\n\n    $_unbindEvents(events) {\n      if (this.map) {\n        events.forEach(eventName => {\n          this.map.off(eventName, this.layerId, this.$_emitLayerMapEvent);\n        });\n      }\n    },\n\n    $_watchSourceLoading(data) {\n      if (data.dataType === \"source\" && data.sourceId === this.sourceId) {\n        this.$_emitEvent(\"layer-source-loading\", { sourceId: this.sourceId });\n        this.map.off(\"dataloading\", this.$_watchSourceLoading);\n      }\n    },\n\n    move(beforeId) {\n      this.map.moveLayer(this.layerId, beforeId);\n      this.$_emitEvent(\"layer-moved\", {\n        layerId: this.layerId,\n        beforeId: beforeId,\n      });\n    },\n\n    remove() {\n      this.map.removeLayer(this.layerId);\n      this.map.removeSource(this.sourceId);\n      this.$_emitEvent(\"layer-removed\", { layerId: this.layerId });\n      this.$destroy();\n    },\n  },\n\n  render() {},\n};\n","export default {\n  methods: {\n    /**\n     * Emit Vue event with additional data\n     *\n     * @param {string} name EventName\n     * @param {Object} [data={}] Additional data\n     */\n    $_emitEvent(name, data = {}) {\n      // console.log('$_emitEvent is running, name:', name, 'data:', data, 'this.map:', this.map);\n      this.$emit(name, {\n        map: this.map,\n        component: this,\n        ...data,\n      });\n    },\n\n    /**\n     * Emit Vue event with Mapbox event as additional data\n     *\n     * @param {Object} event\n     */\n    $_emitMapEvent(event, data = {}) {\n      // console.log('withEvents.js, $_emitMapEvent is running');\n      this.$_emitEvent(event.type, { mapboxEvent: event, ...data });\n    },\n  },\n};\n","export default [\n  \"mousedown\",\n  \"mouseup\",\n  \"click\",\n  \"dblclick\",\n  \"mousemove\",\n  \"mouseenter\",\n  \"mouseleave\",\n  \"mouseover\",\n  \"mouseout\",\n  \"contextmenu\",\n  \"touchstart\",\n  \"touchend\",\n  \"touchcancel\",\n];\n"],"sourceRoot":""}